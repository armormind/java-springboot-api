name: SPRINGBOOT-JAVA-API

on:
  # workflow_dispatch:
  push:
    branches: [ "master" ]

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    steps:
      
      - name: "cloning repo"
        uses: actions/checkout@v4
        with:
          ref: "master"
      
      - name: "setting up java 21"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          cache-dependency-path: 'pom.xml'
      
      - name: "build with maven"
        run: |
          #!/bin/bash

          mvn package
        shell: bash
      
      - name: "build the docker image"
        run: |
          #!/bin/bash

          docker build -t lingarajsahu49/java:springboot-api .
        shell: bash

      - name: "login to docker hub"
        uses: docker/login-action@v3.4.0
        with:
          username: "lingarajsahu49"
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "upload artifacts to dockerhub"
        run: |
          #!/bin/bash

          docker push lingarajsahu49/java:springboot-api
        shell: bash
  
  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      
      - name: "cloning repo"
        uses: actions/checkout@v4
        with:
          ref: "master"
      
      - name: "configure aws credentials"
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: "genarate kubectl secret"
        run: |
          #!/bin/bash

          aws eks update-kubeconfig --name springboot-api
        shell: bash

      - name: "create deployment"
        run: |
          #!/bin/bash
          
          # kubectl rollout restart deployment springboot-api
          kubectl apply -f deployment.yaml
        shell: bash
        working-directory: infra/k8s
      
      - name: "create ingress class params"
        run: |
          #!/bin/bash
          
          kubectl apply -f ingclass-params.yaml
        shell: bash
        working-directory: infra/k8s
      
      - name: "create ingress class"
        run: |
          #!/bin/bash
          
          kubectl apply -f ingclass.yaml
        shell: bash
        working-directory: infra/k8s
      
      - name: "create ingress rules"
        run: |
          #!/bin/bash
          
          kubectl apply -f ingress.yaml
        shell: bash
        working-directory: infra/k8s